@page "/ServiciosTrabajador/servicio-trabajador"
@using System.Text.Json.Serialization
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS

<h3>Gestión de Servicios-Trabajador</h3>

@if (registroDetalle == null && !crearNuevo)
{
    <div class="mb-3 d-flex align-items-center flex-wrap">
        <input type="number" class="form-control me-2 mb-2" placeholder="Buscar por ID..." @bind="filtroId" />
        <button class="btn btn-primary mb-2" @onclick="BuscarPorIdAsync">Buscar</button>
        <button class="btn btn-secondary mb-2" @onclick="LimpiarBusqueda">Limpiar</button>
    </div>

    <div>
        <button @onclick="MostrarFormularioCrear">Crear Nuevo</button>

        @if (registros == null)
        {
            <p>Cargando registros...</p>
        }
        else if (!registros.Any())
        {
            <p>No hay registros disponibles.</p>
        }
        else
        {
            <table border="1" cellpadding="5" cellspacing="0">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Servicio</th>
                        <th>Trabajador</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var r in registros)
                    {
                        <tr>
                            <td>@r.Id</td>
                            <td>@listaServicios.FirstOrDefault(s => s.Id == r.Id_Servicio)?.Nombre_Servicio</td>
                            <td>@ObtenerNombreTrabajador(r.Id_Trabajador)</td>
                            <td>
                                <button @onclick="() => VerDetalle(r.Id)">Ver</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
}
else if (registroDetalle != null)
{
    <div>
        <h4>Detalle del Registro</h4>
        <p><strong>ID:</strong> @registroDetalle.Id</p>
        <p><strong>Servicio:</strong> @listaServicios.FirstOrDefault(s => s.Id == registroDetalle.Id_Servicio)?.Nombre_Servicio</p>
        <p><strong>Trabajador:</strong> @ObtenerNombreTrabajador(registroDetalle.Id_Trabajador)</p>

        <button @onclick="Regresar">Volver</button>
    </div>
}
else if (crearNuevo)
{
    <div>
        <h4>Crear Nuevo Registro</h4>
        <p>Servicio:</p>
        <select class="form-select" @bind="nuevoRegistro.Id_Servicio">
            <option value="">-- Selecciona un servicio --</option>
            @foreach (var s in listaServicios)
            {
                <option value="@s.Id">@s.Nombre_Servicio</option>
            }
        </select>

        @if (!esAdmin)
        {
            <p>Trabajador: <strong>@username</strong></p>
            <button @onclick="CrearRegistro">Guardar</button>
        }
        else
        {
            <p>❌ Los administradores no pueden crear asignaciones</p>
            <button class="btn btn-primary" disabled>Guardar</button>
        }
        <button @onclick="CancelarCrear">Cancelar</button>
    </div>
}

@if (!string.IsNullOrEmpty(mensaje))
{
    <p>@mensaje</p>
}

@code {
    private List<ServicioTrabajadorDTO> registros;
    private ServicioTrabajadorDTO registroDetalle;
    private ServicioTrabajadorDTO nuevoRegistro = new();

    private bool crearNuevo = false;
    private string mensaje;
    private int? filtroId = null;

    private List<ServicioDTO> listaServicios = new();
    private List<TrabajadorDTO> trabajadores = new();
    private string username;
    private int userId;
    private bool esAdmin;

    protected override async Task OnInitializedAsync()
    {
        var token = await JS.InvokeAsync<string>("sessionStorage.getItem", "authToken");
        if (string.IsNullOrEmpty(token))
        {
            Navigation.NavigateTo("/");
            return;
        }

        await ObtenerUsuarioLogueado();
        await CargarListaServicios();
        await CargarRegistros();
    }

    private async Task CargarListaServicios()
    {
        try
        {
            var token = await JS.InvokeAsync<string>("sessionStorage.getItem", "authToken");
            Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            listaServicios = await Http.GetFromJsonAsync<List<ServicioDTO>>(
                "https://gestionsalyapi.onrender.com/servicios"
            );
        }
        catch (Exception ex)
        {
            mensaje = $"🚨 Error al cargar lista de servicios: {ex.Message}";
        }
    }

    private string ObtenerNombreTrabajador(int idTrabajador)
    {
        if (esAdmin)
        {
            return trabajadores.FirstOrDefault(t => t.Id == idTrabajador)?.Nombre ?? "Desconocido";
        }
        else
        {
            return username;
        }
    }

    private async Task ObtenerUsuarioLogueado()
    {
        var token = await JS.InvokeAsync<string>("sessionStorage.getItem", "authToken");
        if (!string.IsNullOrEmpty(token))
        {
            var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
            var jwt = handler.ReadJwtToken(token);

            username = jwt.Claims.FirstOrDefault(c => c.Type == "username")?.Value ?? "Desconocido";
            userId = int.Parse(jwt.Claims.FirstOrDefault(c => c.Type == "id")?.Value ?? "0");

            var roleClaim = jwt.Claims.FirstOrDefault(c => c.Type == "role")?.Value ?? "";
            esAdmin = roleClaim.Contains("Administrador", StringComparison.OrdinalIgnoreCase);
        }
    }

    private async Task CargarRegistros()
    {
        try
        {
            var token = await JS.InvokeAsync<string>("sessionStorage.getItem", "authToken");
            Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            registros = await Http.GetFromJsonAsync<List<ServicioTrabajadorDTO>>(
                "https://gestionsalyapi.onrender.com/servicio-trabajador"
            );

            if (!esAdmin)
            {
                registros = registros.Where(r => r.Id_Trabajador == userId).ToList();
            }
        }
        catch (Exception ex)
        {
            mensaje = "Error al cargar registros: " + ex.Message;
        }
    }

    private async Task BuscarPorIdAsync()
    {
        if (filtroId == null)
        {
            mensaje = "Por favor ingresa un ID válido.";
            return;
        }

        try
        {
            var token = await JS.InvokeAsync<string>("sessionStorage.getItem", "authToken");
            Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var registro = await Http.GetFromJsonAsync<ServicioTrabajadorDTO>(
                $"https://gestionsalyapi.onrender.com/servicio-trabajador/{filtroId}"
            );

            if (registro != null)
            {
                registros = new List<ServicioTrabajadorDTO> { registro };
                mensaje = null;
            }
            else
            {
                registros = new List<ServicioTrabajadorDTO>();
                mensaje = "No se encontró ningún registro con ese ID.";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"🚨 Error al buscar registro: {ex.Message}";
        }
    }

    private async Task LimpiarBusqueda()
    {
        filtroId = null;
        mensaje = null;
        await CargarRegistros();
    }

    private async Task VerDetalle(int id)
    {
        try
        {
            var token = await JS.InvokeAsync<string>("sessionStorage.getItem", "authToken");
            Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            registroDetalle = await Http.GetFromJsonAsync<ServicioTrabajadorDTO>(
                $"https://gestionsalyapi.onrender.com/servicio-trabajador/{id}"
            );
        }
        catch (Exception ex)
        {
            mensaje = "Error al obtener detalle: " + ex.Message;
        }
    }

    private void Regresar()
    {
        registroDetalle = null;
        crearNuevo = false;
    }

    private void MostrarFormularioCrear()
    {
        crearNuevo = true;
        nuevoRegistro = new ServicioTrabajadorDTO();
    }

    private async Task CrearRegistro()
    {
        try
        {
            var token = await JS.InvokeAsync<string>("sessionStorage.getItem", "authToken");
            Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var response = await Http.PostAsJsonAsync(
                "https://gestionsalyapi.onrender.com/servicio-trabajador",
                new { id_servicio = nuevoRegistro.Id_Servicio }
            );

            if (response.IsSuccessStatusCode)
            {
                mensaje = "✅ Registro creado correctamente.";
                crearNuevo = false;
                await CargarRegistros();
            }
            else
            {
                mensaje = "❌ Error al crear registro: " + response.ReasonPhrase;
            }
        }
        catch (Exception ex)
        {
            mensaje = "🚨 Error de conexión: " + ex.Message;
        }
    }

    private void CancelarCrear() => crearNuevo = false;

    public class ServicioTrabajadorDTO
    {
        [JsonPropertyName("id")]
        public int Id { get; set; }

        [JsonPropertyName("id_servicio")]
        public int Id_Servicio { get; set; }

        [JsonPropertyName("id_trabajador")]
        public int Id_Trabajador { get; set; }
    }

    public class ServicioDTO
    {
        [JsonPropertyName("id_servicio")]
        public int Id { get; set; }

        [JsonPropertyName("nombre_servicio")]
        public string Nombre_Servicio { get; set; }

        [JsonPropertyName("descripcion")]
        public string Descripcion { get; set; }

        [JsonPropertyName("duracion")]
        public int Duracion { get; set; }

        [JsonPropertyName("precio")]
        public string Precio { get; set; }
    }

    public class TrabajadorDTO
    {
        [JsonPropertyName("id")] public int Id { get; set; }
        [JsonPropertyName("nombre")] public string Nombre { get; set; }
    }
}
