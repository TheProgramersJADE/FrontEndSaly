@page "/cita/citas"
@using System.Text.Json.Serialization

<PageTitle>@tituloSeccion</PageTitle>

@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS

<h3 class="form-title">@tituloSeccion</h3>

@if (citaDetalle == null && citaEliminar == null && citaEditar == null)
{
    <div class="login-form">
        <!-- búsqueda por ID -->
        <div class="mb-3 d-flex flex-wrap align-items-center">
            <input type="number" class="form-control styled-input me-2 mb-2 flex-grow-1"
                   placeholder="Buscar por ID de cita..." @bind="buscarId" @bind:event="oninput" />
            <button class="btn styled-btn primary mb-2 me-2" @onclick="BuscarPorId">Buscar</button>
            <button class="btn styled-btn secondary mb-2" @onclick="LimpiarBusqueda">Limpiar</button>
        </div>

        <button class="btn styled-btn primary mb-3" @onclick="IrACrearCita">Crear Nueva Cita</button>

        @if (citas == null)
        {
            <p class="mensaje">Cargando citas...</p>
        }
        else if (!citas.Any())
        {
            <p class="mensaje">No hay citas registradas.</p>
        }
        else
        {
            <div class="table-responsive">
                <table class="table styled-table">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Cliente</th>
                            <th>Teléfono</th>
                            <th>Fecha y Hora</th>
                            <th>Trabajador</th>
                            <th>Servicio</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var cita in citas.Skip((paginaActual - 1) * tamanoPagina).Take(tamanoPagina))
                        {
                            <tr>
                                <td>@cita.IdCita</td>
                                <td>@cita.NombreCliente</td>
                                <td>@cita.TelefonoCliente</td>
                                <td>@cita.FechaHora.ToString("yyyy-MM-dd HH:mm")</td>
                                <td>@cita.NombreTrabajador</td>
                                <td>@cita.IdServicio</td>
                                <td>
                                    <button class="btn styled-btn info btn-sm me-1" @onclick="@(() => VerCita(cita.IdCita))">Ver</button>
                                    <button class="btn styled-btn warning btn-sm me-1" @onclick="@(() =>CargarFormularioEdicion(cita.IdCita))">Editar</button>
                                    <button class="btn styled-btn danger btn-sm" @onclick="@(() => MostrarConfirmacionEliminar(cita))">Eliminar</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Controles de paginación -->
            <div class="d-flex justify-content-center align-items-center mt-3">
                <button class="btn styled-btn secondary me-2" @onclick="PaginaAnterior" disabled="@(paginaActual == 1)">Anterior</button>
                <span><strong>Página @paginaActual de @totalPaginas</strong></span>
                <button class="btn styled-btn secondary ms-2" @onclick="PaginaSiguiente" disabled="@(paginaActual == totalPaginas)">Siguiente</button>
            </div>
        }
    </div>
}
else if (citaDetalle != null && citaEliminar == null)
{
    <!-- Panel de detalle -->
    <div class="login-form">
        <div class="card styled-card p-3 mb-3">
            <p><strong>ID:</strong> @citaDetalle.IdCita</p>
            <p><strong>Cliente:</strong> @citaDetalle.NombreCliente</p>
            <p><strong>Teléfono:</strong> @citaDetalle.TelefonoCliente</p>
            <p><strong>Fecha:</strong> @citaDetalle.FechaHora.ToString("yyyy-MM-dd HH:mm")</p>
            <p><strong>Trabajador:</strong> @citaDetalle.NombreTrabajador</p>
            <p><strong>ID Servicio:</strong> @citaDetalle.IdServicio</p>
        </div>
        <button class="btn styled-btn secondary" @onclick="Regresar">Regresar</button>
    </div>
}
else if (citaEliminar != null)
{
    <!-- Panel de eliminación -->
    <div class="login-form border-danger">
        <div class="alert alert-warning mb-3">⚠️ ¿Seguro que deseas eliminar esta cita?</div>

        <p><strong>ID:</strong> @citaEliminar.IdCita</p>
        <p><strong>Cliente:</strong> @citaEliminar.NombreCliente</p>

        <div class="d-flex mt-3">
            <button class="btn styled-btn danger btn-sm me-2" @onclick="ConfirmarEliminar">Eliminar</button>
            <button class="btn styled-btn secondary btn-sm" @onclick="CancelarEliminar">Cancelar</button>
        </div>
    </div>
}
else if (citaEditar != null)
{
    <!-- Formulario de edición -->
    <div class="login-form">
        <h4 class="mb-3">✏️ Editar Cita #@citaEditar.IdCita</h4>

        <div class="mb-3">
            <label><strong>Nombre del Cliente:</strong></label>
            <input class="form-control styled-input" @bind="citaEditar.NombreCliente" />
        </div>

        <div class="mb-3">
            <label><strong>Teléfono del Cliente:</strong></label>
            <input class="form-control styled-input" @bind="citaEditar.TelefonoCliente" />
        </div>

    <input type="datetime-local" class="form-control styled-input"
       value="@citaEditar.FechaHora.ToString("yyyy-MM-ddTHH:mm")"
       @onchange='@(e => citaEditar.FechaHora = DateTime.ParseExact(e.Value.ToString(), "yyyy-MM-ddTHH:mm", null))' />


        <div class="mb-3">
            <label><strong>Nombre del Trabajador:</strong></label>
            <input class="form-control styled-input" @bind="citaEditar.NombreTrabajador" />
        </div>

        <div class="mb-3">
            <label><strong>ID del Servicio:</strong></label>
            <input type="number" class="form-control styled-input" @bind="citaEditar.IdServicio" />
        </div>

        <div class="d-flex mt-3">
            <button class="btn styled-btn primary me-2" @onclick="GuardarCambios">💾 Guardar Cambios</button>
            <button class="btn styled-btn secondary" @onclick="CancelarEdicion">Cancelar</button>
        </div>
    </div>
}


@if (!string.IsNullOrEmpty(mensaje))
{
    <p class="mensaje">@mensaje</p>
}

<style>
    .form-title {
        font-family: 'Lilita One', cursive;
        font-size: 2rem;
        font-weight: bold;
        color: #111;
        margin-bottom: 2rem;
        text-align: center;
    }

    .login-form {
        max-width: 900px;
        margin: 0 auto 2rem auto;
        padding: 2rem;
        background-color: #f7e6fa;
        border-radius: 16px;
        box-shadow: 0 6px 12px rgba(0,0,0,0.15);
    }

    .styled-input {
        border-radius: 12px;
        border: 2px solid #a569bd;
        padding: 0.7rem 1rem;
        margin-bottom: 1.2rem;
        transition: all 0.3s ease;
        font-weight: bold;
        color: #111;
        background-color: #fff;
    }

    .styled-input:focus {
        outline: none;
        box-shadow: 0 0 0 0.2rem #9b59b6;
        border-color: #9b59b6;
    }

    .styled-btn {
        border-radius: 12px;
        font-weight: bold;
        padding: 0.5rem 1rem;
        margin: 0.3rem;
        transition: all 0.3s ease;
        box-shadow: 0 3px 6px rgba(0,0,0,0.15);
        color: #111;
        cursor: pointer;
        font-size: 0.9rem;
    }

    .styled-btn.primary {
        background-color: #a569bd;
        border: none;
    }

    .styled-btn.secondary {
        background-color: #d9a3e0;
        border: none;
    }

    .styled-btn.info {
        background-color: #85c1e9;
        border: none;
        color: #111;
    }

    .styled-btn.warning {
        background-color: #f5b041;
        border: none;
        color: #111;
    }

    .styled-btn.danger {
        background-color: #e74c3c;
        border: none;
        color: #111;
    }

    .styled-btn:hover {
        transform: translateY(-3px);
        box-shadow: 0 8px 16px rgba(0,0,0,0.25);
    }

    .styled-table {
        width: 100%;
        border-collapse: collapse;
        background-color: #fff;
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 6px 12px rgba(0,0,0,0.1);
    }

    .styled-table th {
        background-color: #a569bd;
        color: #fff;
        text-align: center;
        padding: 0.8rem;
    }

    .styled-table td {
        padding: 0.8rem;
        border-top: 1px solid #ddd;
        text-align: center;
    }

    .styled-card {
        border-radius: 16px;
        background-color: #f7e6fa;
        box-shadow: 0 6px 12px rgba(0,0,0,0.15);
    }

    .mensaje {
        font-weight: bold;
        margin-top: 1rem;
        text-align: center;
        color: #6f2c6f;
    }

    .styled-table th, .styled-table td {
        vertical-align: middle;
    }
</style>

@code {
    private List<CitaDTO> citas;
    private CitaDTO citaDetalle;
    private CitaDTO citaEliminar;
    private CitaDTO citaEditar;
    private string mensaje;

    private int? buscarId;

    private string tituloSeccion = "Gestión de Citas";

    // 🔹 Paginación
    private int paginaActual = 1;
    private int tamanoPagina = 5;
    private int totalPaginas => (int)Math.Ceiling((double)(citas?.Count ?? 0) / tamanoPagina);

    protected override async Task OnInitializedAsync()
    {
       
        await CargarCitasAsync();
    }

    private async Task CargarCitasAsync()
    {
        try
        {
           
            citas = await Http.GetFromJsonAsync<List<CitaDTO>>("https://gestionsalyapi.onrender.com/citas");
            paginaActual = 1;
        }
        catch (Exception ex)
        {
            mensaje = $"🚨 Error al cargar citas: {ex.Message}";
        }
    }

    private async Task BuscarPorId()
    {
        if (buscarId == null || buscarId <= 0)
        {
            mensaje = "⚠️ Ingresa un ID válido para buscar.";
            return;
        }

        try
        {
           
            var cita = await Http.GetFromJsonAsync<CitaDTO>($"https://gestionsalyapi.onrender.com/citas/{buscarId}");
            if (cita != null)
            {
                citas = new List<CitaDTO> { cita };
                paginaActual = 1;
                mensaje = $"✅ Resultado encontrado.";
            }
            else
            {
                citas = new List<CitaDTO>();
                mensaje = $"❌ No se encontró ninguna cita con ID {buscarId}.";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"🚨 Error al buscar cita: {ex.Message}";
        }
    }

    private async Task LimpiarBusqueda()
    {
        buscarId = null;
        mensaje = string.Empty;
        await CargarCitasAsync();
    }

    private void IrACrearCita() => Navigation.NavigateTo("/cita/crear");

    private async Task VerCita(int id)
    {
        try
        {

            citaDetalle = await Http.GetFromJsonAsync<CitaDTO>($"https://gestionsalyapi.onrender.com/citas/{id}");
            tituloSeccion = "Detalle de la Cita";
        }
        catch (Exception ex)
        {
            mensaje = $"🚨 Error al obtener la cita: {ex.Message}";
        }
    }

private async Task CargarFormularioEdicion(int id)
{
    mensaje = string.Empty; // ✅ limpiar mensajes anteriores

    try
    {
        citaEditar = await Http.GetFromJsonAsync<CitaDTO>($"https://gestionsalyapi.onrender.com/citas/{id}");
        tituloSeccion = "Editar Cita";
    }
    catch (Exception ex)
    {
        mensaje = $"🚨 Error al cargar la cita para edición: {ex.Message}";
    }
}

private async Task GuardarCambios()
{
    mensaje = string.Empty; // Limpiar mensajes anteriores

    try
    {
        // Enviar los datos en el formato exacto que espera la API
        var dtoParaEnviar = new
        {
            nombre_cliente = citaEditar.NombreCliente,
            telefono_cliente = citaEditar.TelefonoCliente,
            fecha_hora = citaEditar.FechaHora.ToString("yyyy-MM-dd HH:mm:ss"), // ✅ Formato correcto
            nombre_trabajador = citaEditar.NombreTrabajador,
            id_servicio = citaEditar.IdServicio
        };

        var response = await Http.PutAsJsonAsync(
            $"https://gestionsalyapi.onrender.com/citas/{citaEditar.IdCita}",
            dtoParaEnviar
        );

        if (response.IsSuccessStatusCode)
        {
            mensaje = "✅ Cita actualizada correctamente.";
            citaEditar = null;
            tituloSeccion = "Gestión de Citas";
            await CargarCitasAsync();
        }
        else
        {
            mensaje = $"❌ Error al actualizar la cita: {response.ReasonPhrase}";
        }
    }
    catch (Exception ex)
    {
        mensaje = $"🚨 Error: {ex.Message}";
    }
}



    private void CancelarEdicion()
    {
        citaEditar = null;
        tituloSeccion = "Gestión de Citas";
    }

    private void MostrarConfirmacionEliminar(CitaDTO cita)
    {
        citaEliminar = cita;
        tituloSeccion = "Eliminar Cita";
    }

    private async Task ConfirmarEliminar()
    {
        try
        {
            var response = await Http.DeleteAsync($"https://gestionsalyapi.onrender.com/citas/{citaEliminar.IdCita}");
            if (response.IsSuccessStatusCode)
            {
                mensaje = "✅ Cita eliminada correctamente.";
                citaEliminar = null;
                tituloSeccion = "Gestión de Citas";
                await CargarCitasAsync();
            }
            else
            {
                mensaje = $"❌ Error al eliminar cita: {response.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"🚨 Error: {ex.Message}";
        }
    }

    private void CancelarEliminar()
    {
        citaEliminar = null;
        tituloSeccion = "Gestión de Citas";
    }

    private void Regresar()
    {
        citaDetalle = null;
        tituloSeccion = "Gestión de Citas";
    }

    // 🔹 Métodos de paginación
    private void PaginaAnterior()
    {
        if (paginaActual > 1)
            paginaActual--;
    }

    private void PaginaSiguiente()
    {
        if (paginaActual < totalPaginas)
            paginaActual++;
    }

    public class CitaDTO
    {
        [JsonPropertyName("id_cita")]
        public int IdCita { get; set; }

        [JsonPropertyName("nombre_cliente")]
        public string NombreCliente { get; set; }

        [JsonPropertyName("telefono_cliente")]
        public string TelefonoCliente { get; set; }

        [JsonPropertyName("fecha_hora")]
        public DateTime FechaHora { get; set; }

        [JsonPropertyName("nombre_trabajador")]
        public string NombreTrabajador { get; set; }

        [JsonPropertyName("id_servicio")]
        public int IdServicio { get; set; }
    }
}







@* @page "/cita/citas"
@using System.Text.Json.Serialization

<PageTitle>@tituloSeccion</PageTitle>

@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS

<h3>@tituloSeccion</h3>

@if (citaDetalle == null && citaEliminar == null)
{
    <!-- búsqueda por ID -->
    <div class="input-group mb-3" style="max-width: 350px;">
        <input type="number" class="form-control" placeholder="Buscar por ID de cita..."
               @bind="buscarId" @bind:event="oninput" />
        <button class="btn btn-outline-secondary" @onclick="BuscarPorId">Buscar</button>
        <button class="btn btn-outline-danger" @onclick="LimpiarBusqueda">Limpiar</button>
    </div>

    <button class="btn btn-primary mb-3" @onclick="IrACrearCita">Crear Nueva Cita</button>

    @if (citas == null)
    {
        <p>Cargando citas...</p>
    }
    else if (!citas.Any())
    {
        <p>No hay citas registradas.</p>
    }
    else
    {
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Cliente</th>
                    <th>Teléfono</th>
                    <th>Fecha y Hora</th>
                    <th>Trabajador</th>
                    <th>Servicio</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var cita in citas)
                {
                    <tr>
                        <td>@cita.IdCita</td>
                        <td>@cita.NombreCliente</td>
                        <td>@cita.TelefonoCliente</td>
                        <td>@cita.FechaHora.ToString("yyyy-MM-dd HH:mm")</td>
                        <td>@cita.NombreTrabajador</td>
                        <td>@cita.IdServicio</td>
                        <td>
                            <button class="btn btn-info btn-sm me-1" @onclick="@(() => VerCita(cita.IdCita))">Ver</button>
                            <button class="btn btn-warning btn-sm me-1" @onclick="@(() => EditarCita(cita.IdCita))">Editar</button>
                            <button class="btn btn-danger btn-sm" @onclick="@(() => MostrarConfirmacionEliminar(cita))">Eliminar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}
else if (citaDetalle != null && citaEliminar == null)
{
    <!-- Panel de detalle -->
    <div class="card p-3 mb-3 shadow-sm">
        <p><strong>ID:</strong> @citaDetalle.IdCita</p>
        <p><strong>Cliente:</strong> @citaDetalle.NombreCliente</p>
        <p><strong>Teléfono:</strong> @citaDetalle.TelefonoCliente</p>
        <p><strong>Fecha:</strong> @citaDetalle.FechaHora.ToString("yyyy-MM-dd HH:mm")</p>
        <p><strong>Trabajador:</strong> @citaDetalle.NombreTrabajador</p>
        <p><strong>ID Servicio:</strong> @citaDetalle.IdServicio</p>

        <button class="btn btn-primary btn-sm me-2" @onclick="Regresar">Regresar</button>
    </div>
}
else if (citaEliminar != null)
{
    <!-- Panel de eliminación -->
    <div class="card p-3 mb-3 border-danger shadow-sm">
        <div class="alert alert-warning mb-3">⚠️ ¿Seguro que deseas eliminar esta cita?</div>

        <p><strong>ID:</strong> @citaEliminar.IdCita</p>
        <p><strong>Cliente:</strong> @citaEliminar.NombreCliente</p>

        <div class="d-flex mt-3">
            <button class="btn btn-danger btn-sm me-2" @onclick="ConfirmarEliminar">Eliminar</button>
            <button class="btn btn-secondary btn-sm" @onclick="CancelarEliminar">Cancelar</button>
        </div>
    </div>
}

@if (!string.IsNullOrEmpty(mensaje))
{
    <p class="mt-3">@mensaje</p>
}

@code {
    private List<CitaDTO> citas;
    private CitaDTO citaDetalle;
    private CitaDTO citaEliminar;
    private string mensaje;

    private int? buscarId;

    private string tituloSeccion = "Gestión de Citas";

    protected override async Task OnInitializedAsync()
    {
        var token = await JS.InvokeAsync<string>("sessionStorage.getItem", "authToken");
        if (string.IsNullOrEmpty(token))
        {
            Navigation.NavigateTo("/");
            return;
        }
        await CargarCitasAsync();
    }

    private async Task CargarCitasAsync()
    {
        try
        {
            var token = await JS.InvokeAsync<string>("sessionStorage.getItem", "authToken");
            Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            citas = await Http.GetFromJsonAsync<List<CitaDTO>>("https://gestionsalyapi.onrender.com/citas");
        }
        catch (Exception ex)
        {
            mensaje = $"🚨 Error al cargar citas: {ex.Message}";
        }
    }

    private async Task BuscarPorId()
    {
        if (buscarId == null || buscarId <= 0)
        {
            mensaje = "⚠️ Ingresa un ID válido para buscar.";
            return;
        }

        try
        {
            var token = await JS.InvokeAsync<string>("sessionStorage.getItem", "authToken");
            Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var cita = await Http.GetFromJsonAsync<CitaDTO>($"https://gestionsalyapi.onrender.com/citas/{buscarId}");
            if (cita != null)
            {
                citas = new List<CitaDTO> { cita };
                mensaje = $"✅ Resultado encontrado.";
            }
            else
            {
                citas = new List<CitaDTO>();
                mensaje = $"❌ No se encontró ninguna cita con ID {buscarId}.";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"🚨 Error al buscar cita: {ex.Message}";
        }
    }

    // ✅ Restablecer el listado original
    private async Task LimpiarBusqueda()
    {
        buscarId = null;
        mensaje = string.Empty;
        await CargarCitasAsync();
    }

    private void IrACrearCita() => Navigation.NavigateTo("/cita/crear");
    private void EditarCita(int id) => Navigation.NavigateTo($"/cita/editar/{id}");

    private async Task VerCita(int id)
    {
        try
        {
            var token = await JS.InvokeAsync<string>("sessionStorage.getItem", "authToken");
            Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            citaDetalle = await Http.GetFromJsonAsync<CitaDTO>($"https://gestionsalyapi.onrender.com/citas/{id}");
            tituloSeccion = "Detalle de la Cita"; //  Cambia el título
        }
        catch (Exception ex)
        {
            mensaje = $"🚨 Error al obtener la cita: {ex.Message}";
        }
    }

    private void MostrarConfirmacionEliminar(CitaDTO cita)
    {
        citaEliminar = cita;
        tituloSeccion = "Eliminar Cita"; // Cambia el título
    }

    private async Task ConfirmarEliminar()
    {
        try
        {
            var response = await Http.DeleteAsync($"https://gestionsalyapi.onrender.com/citas/{citaEliminar.IdCita}");
            if (response.IsSuccessStatusCode)
            {
                mensaje = "✅ Cita eliminada correctamente.";
                citaEliminar = null;
                tituloSeccion = "Gestión de Citas"; // Volvemos al título principal
                await CargarCitasAsync();
            }
            else
            {
                mensaje = $"❌ Error al eliminar cita: {response.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"🚨 Error: {ex.Message}";
        }
    }

    private void CancelarEliminar()
    {
        citaEliminar = null;
        tituloSeccion = "Gestión de Citas"; // ✅ Volvemos al título principal
    }

    private void Regresar()
    {
        citaDetalle = null;
        tituloSeccion = "Gestión de Citas"; // ✅ Volvemos al título principal
    }

    public class CitaDTO
    {
        [JsonPropertyName("id_cita")]
        public int IdCita { get; set; }

        [JsonPropertyName("nombre_cliente")]
        public string NombreCliente { get; set; }

        [JsonPropertyName("telefono_cliente")]
        public string TelefonoCliente { get; set; }

        [JsonPropertyName("fecha_hora")]
        public DateTime FechaHora { get; set; }

        [JsonPropertyName("nombre_trabajador")]
        public string NombreTrabajador { get; set; }

        [JsonPropertyName("id_servicio")]
        public int IdServicio { get; set; }
    }
}
 *@