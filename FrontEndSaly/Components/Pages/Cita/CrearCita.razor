@page "/cita/crear"
@using System.Text.Json.Serialization
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS

<PageTitle>Crear Cita</PageTitle>

<h3 class="form-title">Crear Nueva Cita</h3>

    <div class="login-form">
        <div class="mb-3">
            <label><strong>Nombre del Cliente:</strong></label>
            <input class="form-control styled-input" @bind="nuevaCita.NombreCliente" />
        </div>

        <div class="mb-3">
            <label><strong>Teléfono del Cliente:</strong></label>
            <input class="form-control styled-input" @bind="nuevaCita.TelefonoCliente" />
        </div>

        <div class="mb-3">
            <label><strong>Nombre del Trabajador:</strong></label>
            <input class="form-control styled-input" @bind="nuevaCita.NombreTrabajador" />
        </div>

        <div class="mb-3">
            <label><strong>Servicio:</strong></label>
            <select class="form-select styled-input" @bind="nuevaCita.IdServicio">
                <option value="">-- Seleccione un servicio --</option>
                @foreach (var servicio in servicios)
                {
                    <option value="@servicio.Id">@servicio.Nombre_Servicio</option>
                }
            </select>
        </div>

        <div class="mb-3">
            <label><strong>Fecha y Hora:</strong></label>
            <input type="datetime-local" class="form-control styled-input" @bind="FechaHoraLocal" />
        </div>

        <div class="d-flex mt-3">
            <button class="btn styled-btn primary me-2" @onclick="GuardarCita">💾 Guardar Cita</button>
            <button class="btn styled-btn secondary" @onclick="Cancelar">Cancelar</button>
        </div>

        @if (!string.IsNullOrEmpty(mensaje))
        {
            <p class="mensaje">@mensaje</p>
        }
    </div>


<style>
    .form-title {
        font-family: 'Lilita One', cursive;
        font-size: 2rem;
        font-weight: bold;
        color: #111;
        margin-bottom: 2rem;
        text-align: center;
    }

    .login-form {
        max-width: 900px;
        margin: 0 auto 2rem auto;
        padding: 2rem;
        background-color: #f7e6fa;
        border-radius: 16px;
        box-shadow: 0 6px 12px rgba(0,0,0,0.15);
    }

    .styled-input {
        border-radius: 12px;
        border: 2px solid #a569bd;
        padding: 0.7rem 1rem;
        margin-bottom: 1.2rem;
        transition: all 0.3s ease;
        font-weight: bold;
        color: #111;
        background-color: #fff;
    }

        .styled-input:focus {
            outline: none;
            box-shadow: 0 0 0 0.2rem #9b59b6;
            border-color: #9b59b6;
        }

    .styled-btn {
        border-radius: 12px;
        font-weight: bold;
        padding: 0.5rem 1rem;
        margin: 0.3rem;
        transition: all 0.3s ease;
        box-shadow: 0 3px 6px rgba(0,0,0,0.15);
        color: #111;
        cursor: pointer;
        font-size: 0.9rem;
    }

        .styled-btn.primary {
            background-color: #a569bd;
            border: none;
        }

        .styled-btn.secondary {
            background-color: #d9a3e0;
            border: none;
        }

        .styled-btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 16px rgba(0,0,0,0.25);
        }

    .mensaje {
        font-weight: bold;
        margin-top: 1rem;
        text-align: center;
        color: #6f2c6f;
    }
</style>

@code {
    private CitaDTO nuevaCita = new CitaDTO();
    private List<ServicioDTO> servicios = new();
    private string mensaje = string.Empty;

    private DateTime? FechaHoraLocal
    {
        get => nuevaCita.FechaHora == default ? (DateTime?)null : nuevaCita.FechaHora;
        set
        {
            if (value.HasValue)
                nuevaCita.FechaHora = value.Value;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var token = await JS.InvokeAsync<string>("sessionStorage.getItem", "authToken");
        if (string.IsNullOrEmpty(token))
        {
            // Si no hay token, redirige al login
            Navigation.NavigateTo("/", true);
            return;
        }

        // Si hay token, lo agregamos a los headers
        Http.DefaultRequestHeaders.Authorization =
            new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

        await CargarServiciosAsync();
    }

    // private async Task CargarServiciosAsync()
    // {
    //     try
    //     {
    //         servicios = await Http.GetFromJsonAsync<List<ServicioDTO>>(
    //             "https://gestionsalyapi.onrender.com/servicios");
    //     }
    //     catch (Exception ex)
    //     {
    //         mensaje = $"🚨 Error al cargar servicios: {ex.Message}";
    //     }
    // }

    private async Task CargarServiciosAsync()
    {
        try
        {
            // Traemos todos los servicios con paginación (page=1, limit=100)
            var respuesta = await Http.GetFromJsonAsync<RespuestaServicios>(
                "https://gestionsalyapi.onrender.com/servicios?page=1&limit=100"
            );

            servicios = respuesta?.Data ?? new List<ServicioDTO>();
        }
        catch (Exception ex)
        {
            mensaje = $"🚨 Error al cargar servicios: {ex.Message}";
        }
    }

    // Clase para recibir la respuesta paginada
    public class RespuestaServicios
    {
        [JsonPropertyName("page")]
        public int Page { get; set; }

        [JsonPropertyName("limit")]
        public int Limit { get; set; }

        [JsonPropertyName("total")]
        public int Total { get; set; }

        [JsonPropertyName("totalPages")]
        public int TotalPages { get; set; }

        [JsonPropertyName("data")]
        public List<ServicioDTO> Data { get; set; }
    }


    private async Task GuardarCita()
    {
        mensaje = string.Empty;

        if (string.IsNullOrWhiteSpace(nuevaCita.NombreCliente) ||
            string.IsNullOrWhiteSpace(nuevaCita.TelefonoCliente) ||
            string.IsNullOrWhiteSpace(nuevaCita.NombreTrabajador) ||
            nuevaCita.IdServicio == 0 ||
            nuevaCita.FechaHora == default)
        {
            mensaje = "⚠️ Todos los campos son obligatorios.";
            return;
        }

        try
        {
            var dto = new
            {
                nombre_cliente = nuevaCita.NombreCliente,
                telefono_cliente = nuevaCita.TelefonoCliente,
                fecha_hora = nuevaCita.FechaHora.ToString("yyyy-MM-dd HH:mm:ss"),
                nombre_trabajador = nuevaCita.NombreTrabajador,
                id_servicio = nuevaCita.IdServicio
            };

            var response = await Http.PostAsJsonAsync(
                "https://gestionsalyapi.onrender.com/citas", dto);

            if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                mensaje = "⚠️ No autorizado. Por favor inicia sesión.";
                Navigation.NavigateTo("/login");
                return;
            }

            if (response.IsSuccessStatusCode)
            {
                mensaje = "✅ Cita realizada correctamente.";
                await Task.Delay(3000);
                nuevaCita = new CitaDTO();
                mensaje = string.Empty;
                Navigation.NavigateTo("/sobrenosotros");
            }
            else
            {
                mensaje = $"❌ Cita denegada: {response.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"🚨 Error: {ex.Message}";
        }
    }

    private void Cancelar() => Navigation.NavigateTo("/sobrenosotros");
    private void IrALogin() => Navigation.NavigateTo("/");

    public class CitaDTO
    {
        [JsonPropertyName("id_cita")]
        public int IdCita { get; set; }
        [JsonPropertyName("nombre_cliente")]
        public string NombreCliente { get; set; } = string.Empty;
        [JsonPropertyName("telefono_cliente")]
        public string TelefonoCliente { get; set; } = string.Empty;
        [JsonPropertyName("fecha_hora")]
        public DateTime FechaHora { get; set; }
        [JsonPropertyName("nombre_trabajador")]
        public string NombreTrabajador { get; set; } = string.Empty;
        [JsonPropertyName("id_servicio")]
        public int IdServicio { get; set; }
    }

    public class ServicioDTO
    {
        [JsonPropertyName("id_servicio")]
        public int Id { get; set; }
        [JsonPropertyName("nombre_servicio")]
        public string Nombre_Servicio { get; set; } = string.Empty;
    }
}


















