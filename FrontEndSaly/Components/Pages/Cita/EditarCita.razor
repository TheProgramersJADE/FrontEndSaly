@page "/cita/editar/{id:int}"
@using System.Text.Json.Serialization
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS

<PageTitle>Editar Cita</PageTitle>

<h3 class="mb-4">✏️ Editar Cita</h3>

@if (cita == null)
{
    <p>Cargando datos de la cita...</p>
}
else
{
    <div class="card p-4 shadow-sm" style="max-width: 600px;">
        <div class="mb-3">
            <label class="form-label">Nombre del Cliente</label>
            <input class="form-control" @bind="cita.NombreCliente" />
        </div>

        <div class="mb-3">
            <label class="form-label">Teléfono del Cliente</label>
            <input class="form-control" @bind="cita.TelefonoCliente" />
        </div>

        <div class="mb-3">
            <label class="form-label">Fecha y Hora</label>
            <input type="datetime-local" class="form-control"
                   value="@cita.FechaHora.ToString("yyyy-MM-ddTHH:mm")"
                   @onchange="OnFechaHoraChanged" />
        </div>

        <div class="mb-3">
            <label class="form-label">Trabajador</label>
            <select class="form-select" @bind="cita.NombreTrabajador">
                <option value="">-- Selecciona un trabajador --</option>
                @if (trabajadores != null)
                {
                    @foreach (var t in trabajadores)
                    {
                        <option value="@t.Username">@t.Username</option>
                    }
                }
            </select>
        </div>

        <!-- ✅ Combo de servicios cargados desde la API -->
        <div class="mb-3">
            <label class="form-label">Servicio</label>
            <select class="form-select" @bind="cita.IdServicio">
                <option value="">-- Selecciona un servicio --</option>
                @if (servicios != null)
                {
                    @foreach (var s in servicios)
                    {
                        <option value="@s.Id">@s.Nombre_Servicio</option>
                    }
                }
            </select>
        </div>

        <div class="d-flex justify-content-between">
            <button class="btn btn-success" @onclick="GuardarCambios">💾 Guardar Cambios</button>
            <button class="btn btn-secondary" @onclick="Volver">↩️ Cancelar</button>
        </div>
    </div>
}

@if (!string.IsNullOrEmpty(mensaje))
{
    <div class="alert @alertClass mt-3">@mensaje</div>
}

@code {
    [Parameter] public int id { get; set; }

    private CitaDTO cita;
    private string mensaje;
    private string alertClass = "alert-info";

    private List<ServicioDTO> servicios = new();

    private List<UsuarioDTO> trabajadores = new();

    protected override async Task OnInitializedAsync()
    {
        await CargarServiciosAsync();
        await CargarTrabajadoresAsync(); // ✅ nueva función
        await CargarCita();
    }

    private async Task CargarServiciosAsync()
    {
        try
        {
            var token = await JS.InvokeAsync<string>("sessionStorage.getItem", "authToken");
            Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            servicios = await Http.GetFromJsonAsync<List<ServicioDTO>>("https://gestionsalyapi.onrender.com/servicios");
        }
        catch (Exception ex)
        {
            mensaje = $"🚨 Error al cargar servicios: {ex.Message}";
            alertClass = "alert-danger";
        }
    }

    private async Task CargarTrabajadoresAsync()
    {
        try
        {
            var token = await JS.InvokeAsync<string>("sessionStorage.getItem", "authToken");
            Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var allUsuarios = await Http.GetFromJsonAsync<List<UsuarioDTO>>(
                "https://usersaly-api-node-js.onrender.com/usuarioslist"
            );

            // Filtramos solo los que tengan Role_Id = 2 (trabajadores)
            trabajadores = allUsuarios.Where(u => u.Role_Id == 2).ToList();
        }
        catch (Exception ex)
        {
            mensaje = $"🚨 Error al cargar trabajadores: {ex.Message}";
            alertClass = "alert-danger";
        }
    }

    private async Task CargarCita()
    {
        try
        {
            var token = await JS.InvokeAsync<string>("sessionStorage.getItem", "authToken");
            if (string.IsNullOrEmpty(token))
            {
                Navigation.NavigateTo("/");
                return;
            }

            Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            cita = await Http.GetFromJsonAsync<CitaDTO>($"https://gestionsalyapi.onrender.com/citas/{id}");
        }
        catch (Exception ex)
        {
            mensaje = $"🚨 Error al cargar cita: {ex.Message}";
            alertClass = "alert-danger";
        }
    }

    private void OnFechaHoraChanged(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value?.ToString(), out var fechaHora))
        {
            cita.FechaHora = fechaHora;
        }
    }

    private async Task GuardarCambios()
    {
        try
        {
            var token = await JS.InvokeAsync<string>("sessionStorage.getItem", "authToken");
            Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var response = await Http.PutAsJsonAsync($"https://gestionsalyapi.onrender.com/citas/{id}", cita);

            if (response.IsSuccessStatusCode)
            {
                mensaje = "✅ Cita actualizada correctamente.";
                alertClass = "alert-success";

                await Task.Delay(1500);
                Navigation.NavigateTo("/cita/citas");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                mensaje = $"❌ Error al actualizar cita: {error}";
                alertClass = "alert-danger";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"🚨 Error de conexión: {ex.Message}";
            alertClass = "alert-danger";
        }
    }

    private void Volver()
    {
        Navigation.NavigateTo("/cita/citas");
    }

    public class CitaDTO
    {
        [JsonPropertyName("id_cita")]
        public int IdCita { get; set; }

        [JsonPropertyName("nombre_cliente")]
        public string NombreCliente { get; set; }

        [JsonPropertyName("telefono_cliente")]
        public string TelefonoCliente { get; set; }

        [JsonPropertyName("fecha_hora")]
        public DateTime FechaHora { get; set; }

        [JsonPropertyName("nombre_trabajador")]
        public string NombreTrabajador { get; set; }

        [JsonPropertyName("id_servicio")]
        public int IdServicio { get; set; }
    }

    public class ServicioDTO
    {
        [JsonPropertyName("id_servicio")]
        public int Id { get; set; }

        [JsonPropertyName("nombre_servicio")]
        public string Nombre_Servicio { get; set; }

        [JsonPropertyName("descripcion")]
        public string Descripcion { get; set; }

        [JsonPropertyName("duracion")]
        public int Duracion { get; set; }

        [JsonPropertyName("precio")]
        public string Precio { get; set; }
    }

    public class UsuarioDTO
    {
        [JsonPropertyName("id")]
        public int Id { get; set; }

        [JsonPropertyName("username")]
        public string Username { get; set; }

        [JsonPropertyName("email")]
        public string Email { get; set; }

        [JsonPropertyName("role_id")]
        public int Role_Id { get; set; }
    }
}
