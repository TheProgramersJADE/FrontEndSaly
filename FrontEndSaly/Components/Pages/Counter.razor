@page "/counter"
@using System.Text.Json.Serialization

<PageTitle>Usuarios</PageTitle>

@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS

<h3>Gestión de Usuarios</h3>

@if (usuarioDetalle == null)
{
    <!-- Tabla y búsqueda de usuarios -->
    <div class="mb-3 d-flex align-items-center">
        <input type="text" class="form-control me-2" placeholder="Buscar por email..." @bind="filtroEmail" />

        <select class="form-select me-2" @bind="filtroRoleId">
            <option value="">Todos los roles</option>
            <option value="1">Administrador</option>
            <option value="2">Usuario</option>
        </select>

        <button class="btn btn-secondary" @onclick="BuscarUsuariosAsync">Buscar</button>
    </div>

    <button class="btn btn-primary mb-3" @onclick="IrACrearUsuario">Crear Usuario</button>

    @if (usuarios == null)
    {
        <p>Cargando usuarios...</p>
    }
    else if (!usuarios.Any())
    {
        <p>No hay usuarios registrados.</p>
    }
    else
    {
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Username</th>
                    <th>Email</th>
                    <th>Role ID</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var usuario in usuarios)
                {
                    <tr>
                        <td>@usuario.Id</td>
                        <td>@usuario.Username</td>
                        <td>@usuario.Email</td>
                        <td>@usuario.Role_Id</td>
                        <td>
                            <button class="btn btn-info btn-sm me-1" @onclick="@(() => VerUsuario(usuario.Id))">Ver</button>
                            <button class="btn btn-warning btn-sm me-1" @onclick="@(() => EditarUsuario(usuario.Id))">Editar</button>
                            <button class="btn btn-danger btn-sm" @onclick="@(() => EliminarUsuario(usuario.Id))">Eliminar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}
else
{
    <!-- Panel de detalle de usuario -->
    <div class="card p-3 mb-3">
        <p><strong>ID:</strong> @usuarioDetalle.Id</p>
        <p><strong>Username:</strong> @usuarioDetalle.Username</p>
        <p><strong>Email:</strong> @usuarioDetalle.Email</p>
        <p><strong>Role ID:</strong> @usuarioDetalle.Role_Id</p>
    </div>

    <button class="btn btn-primary" @onclick="Regresar">Regresar</button>
}

@if (!string.IsNullOrEmpty(mensaje))
{
    <p>@mensaje</p>
}

@code {
    private List<UsuarioDTO> usuarios;
    private string mensaje;
    private string filtroEmail = string.Empty;
    private string filtroRoleId = string.Empty;

    private UsuarioDTO usuarioDetalle = null;

    protected override async Task OnInitializedAsync()
    {
        var token = await JS.InvokeAsync<string>("sessionStorage.getItem", "authToken");
        if (string.IsNullOrEmpty(token))
        {
            Navigation.NavigateTo("/");
            return;
        }

        await CargarUsuariosAsync();
    }

    private async Task CargarUsuariosAsync()
    {
        try
        {
            var token = await JS.InvokeAsync<string>("sessionStorage.getItem", "authToken");
            Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            usuarios = await Http.GetFromJsonAsync<List<UsuarioDTO>>(
                "https://usersaly-api-node-js.onrender.com/usuarioslist"
            );
        }
        catch (Exception ex)
        {
            mensaje = $"🚨 Error al cargar usuarios: {ex.Message}";
        }
    }

    private async Task BuscarUsuariosAsync()
    {
        try
        {
            var token = await JS.InvokeAsync<string>("sessionStorage.getItem", "authToken");
            Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var query = new List<string>();
            if (!string.IsNullOrWhiteSpace(filtroEmail)) query.Add($"email={filtroEmail}");
            if (!string.IsNullOrWhiteSpace(filtroRoleId)) query.Add($"role_id={filtroRoleId}");
            var queryString = query.Count > 0 ? "?" + string.Join("&", query) : "";

            usuarios = await Http.GetFromJsonAsync<List<UsuarioDTO>>(
                $"https://usersaly-api-node-js.onrender.com/usuarioslist/buscar{queryString}"
            );
        }
        catch (Exception ex)
        {
            mensaje = $"🚨 Error al buscar usuarios: {ex.Message}";
        }
    }

    private void IrACrearUsuario() => Navigation.NavigateTo("/crearusuario/gestion");
    private void EditarUsuario(int id) => Navigation.NavigateTo($"/usuarios/editar/{id}");

    // **Ver usuario usando el endpoint GET /usuarioslist/:id**
    private async Task VerUsuario(int id)
    {
        try
        {
            var token = await JS.InvokeAsync<string>("sessionStorage.getItem", "authToken");
            Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            usuarioDetalle = await Http.GetFromJsonAsync<UsuarioDTO>(
                $"https://usersaly-api-node-js.onrender.com/usuarioslist/{id}"
            );
        }
        catch (Exception ex)
        {
            mensaje = $"🚨 Error al obtener detalle del usuario: {ex.Message}";
        }
    }

    private void Regresar() => usuarioDetalle = null;

    private async Task EliminarUsuario(int id)
    {
        if (!await JS.InvokeAsync<bool>("confirm", $"¿Deseas eliminar al usuario {id}?")) return;

        try
        {
            var response = await Http.DeleteAsync($"https://usersaly-api-node-js.onrender.com/usuarioslist/{id}");
            if (response.IsSuccessStatusCode)
            {
                mensaje = "✅ Usuario eliminado correctamente.";
                await CargarUsuariosAsync();
            }
            else
            {
                mensaje = $"❌ Error al eliminar usuario: {response.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"🚨 Error de conexión: {ex.Message}";
        }
    }

    public class UsuarioDTO
    {
        [JsonPropertyName("id")]
        public int Id { get; set; }

        [JsonPropertyName("username")]
        public string Username { get; set; }

        [JsonPropertyName("email")]
        public string Email { get; set; }

        [JsonPropertyName("role_id")]
        public int Role_Id { get; set; }
    }
}
