@page "/Reseña/resennas/crear"
@using System.Text.Json.Serialization
@using System.ComponentModel.DataAnnotations

<PageTitle>Crear Reseña</PageTitle>

@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS

<h3 class="form-title">📝 Crear Reseña</h3>

<EditForm Model="@resennaNueva" OnValidSubmit="CrearResennaAsync" class="login-form">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Nombre Cliente:</label>
        <InputText class="form-control styled-input" id="InputNombre" @bind-Value="resennaNueva.Nombre_Cliente" />
    </div>

    <div class="form-group">
        <label>Nombre Trabajador:</label>
        <InputText class="form-control styled-input" id="InputTrabajador" @bind-Value="resennaNueva.Nombre_Trabajador" />
    </div>

    <div class="form-group">
        <label>Calificación (1-5):</label>
        <InputNumber class="form-control styled-input" id="InputCalificacion" @bind-Value="resennaNueva.Calificacion" min="1" max="5" />
    </div>

    <div class="form-group">
        <label>Comentario:</label>
        <InputTextArea class="form-control styled-input" id="InputComentario" @bind-Value="resennaNueva.Comentario" />
    </div>

    <div class="form-group">
        <label>Fecha:</label>
        <InputDate class="form-control styled-input" id="InputFecha" @bind-Value="resennaNueva.Fecha" />
    </div>

    <div class="text-center">
        <button type="button" class="btn styled-btn secondary" @onclick="Cancelar">Cancelar</button>
        <button type="submit" id="btnEnviar" class="btn styled-btn primary">✅ Guardar</button>
    </div>
</EditForm>

@if (!string.IsNullOrEmpty(mensaje))
{
    <p class="mensaje">@mensaje</p>
}

<style>
    /* Título */
    .form-title {
        font-family: 'Lilita One', cursive;
        font-size: 2rem;
        font-weight: bold;
        color: #111;
        margin-bottom: 2rem;
        text-align: center;
    }

    /* Contenedor */
    .login-form {
        max-width: 450px;
        margin: 0 auto;
        padding: 2rem;
        background-color: #f7e6fa;
        border-radius: 16px;
        box-shadow: 0 6px 12px rgba(0,0,0,0.15);
    }

    /* Inputs */
    .styled-input {
        border-radius: 12px;
        border: 2px solid #a569bd;
        padding: 0.7rem 1rem;
        margin-bottom: 1.2rem;
        transition: all 0.3s ease;
        font-weight: bold;
        color: #111;
        background-color: #fff;
    }

        .styled-input:focus {
            outline: none;
            box-shadow: 0 0 0 0.2rem #9b59b6;
            border-color: #9b59b6;
        }

    /* Botones */
    .styled-btn {
        border-radius: 12px;
        font-weight: bold;
        padding: 0.7rem 1.5rem;
        margin: 0.5rem;
        transition: all 0.3s ease;
        box-shadow: 0 3px 6px rgba(0,0,0,0.15);
        color: #111;
        cursor: pointer;
        font-size: 1rem;
    }

        .styled-btn.primary {
            background-color: #a569bd;
            border: none;
        }

        .styled-btn.secondary {
            background-color: #d9a3e0;
            border: none;
        }

        .styled-btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 16px rgba(0,0,0,0.25);
            color: #111;
        }

    /* Mensaje */
    .mensaje {
        font-weight: bold;
        margin-top: 1rem;
        text-align: center;
        color: #6f2c6f;
    }

    /* Labels */
    .form-group label {
        font-weight: bold;
        margin-bottom: 0.3rem;
        display: block;
        color: #111;
        font-size: 1.05rem;
    }
</style>

@code {
    private ResennaDTO resennaNueva = new();
    private string mensaje;

    protected override async Task OnInitializedAsync()
    {
        var token = await JS.InvokeAsync<string>("sessionStorage.getItem", "authToken");
        if (string.IsNullOrEmpty(token))
        {
            // Si no hay token, redirige al login
            Navigation.NavigateTo("/", true);
            return;
        }

        // Si hay token, lo agregamos a los headers
        Http.DefaultRequestHeaders.Authorization =
            new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
    }


    private async Task CrearResennaAsync()
    {
        try
        {
            var token = await JS.InvokeAsync<string>("sessionStorage.getItem", "authToken");
            Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            // Convertimos la fecha a string para enviar al backend
            resennaNueva.FechaString = resennaNueva.Fecha.ToString("yyyy-MM-dd");

            var response = await Http.PostAsJsonAsync(
                "https://gestionsalyapi.onrender.com/resennas",
                resennaNueva
            );

            if (response.IsSuccessStatusCode)
            {
                mensaje = "✅ Reseña creada correctamente.";
                await Task.Delay(1500);
                Navigation.NavigateTo("/sobrenosotros");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                mensaje = $"❌ Error al crear reseña: {response.StatusCode} - {error}";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"🚨 Error de conexión: {ex.Message}";
        }
    }

    private void Cancelar()
    {
        Navigation.NavigateTo("/sobrenosotros");
    }

    public class ResennaDTO
    {
        [JsonPropertyName("id_resena")]
        public int Id { get; set; }

        [JsonPropertyName("nombre_cliente")]
        [Required(ErrorMessage = "El nombre del cliente es obligatorio")]
        public string Nombre_Cliente { get; set; }

        [JsonPropertyName("nombre_trabajador")]
        [Required(ErrorMessage = "El nombre del trabajador es obligatorio")]
        public string Nombre_Trabajador { get; set; }

        [JsonPropertyName("calificacion")]
        [Range(1, 5, ErrorMessage = "La calificación debe estar entre 1 y 5")]
        public int Calificacion { get; set; }

        [JsonPropertyName("comentario")]
        public string Comentario { get; set; }

        [JsonIgnore]
        public DateTime Fecha { get; set; } = DateTime.Today;

        [JsonPropertyName("fecha")]
        public string FechaString { get; set; }
    }
}