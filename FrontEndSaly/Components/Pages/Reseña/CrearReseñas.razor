@page "/Reseña/resennas/crear"
@using System.Text.Json.Serialization
@using System.ComponentModel.DataAnnotations

<PageTitle>Crear Reseña</PageTitle>

@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS

<h3>Crear Reseña</h3>

<EditForm Model="@resennaNueva" OnValidSubmit="CrearResennaAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label>Nombre Cliente</label>
        <InputText class="form-control" @bind-Value="resennaNueva.Nombre_Cliente" />
    </div>

    <div class="mb-3">
        <label>Nombre Trabajador</label>
        <InputText class="form-control" @bind-Value="resennaNueva.Nombre_Trabajador" />
    </div>

    <div class="mb-3">
        <label>Calificación</label>
        <InputNumber class="form-control" @bind-Value="resennaNueva.Calificacion" min="1" max="5" />
    </div>

    <div class="mb-3">
        <label>Comentario</label>
        <InputTextArea class="form-control" @bind-Value="resennaNueva.Comentario" />
    </div>

    <div class="mb-3">
        <label>Fecha</label>
        <InputDate class="form-control" @bind-Value="resennaNueva.Fecha" />
    </div>

    <button type="submit" class="btn btn-success">Guardar</button>
    <button type="button" class="btn btn-secondary ms-2" @onclick="Cancelar">Cancelar</button>
</EditForm>

@if (!string.IsNullOrEmpty(mensaje))
{
    <p class="mt-3">@mensaje</p>
}

@code {
    private ResennaDTO resennaNueva = new();
    private string mensaje;

    private async Task CrearResennaAsync()
    {
        try
        {
            var token = await JS.InvokeAsync<string>("sessionStorage.getItem", "authToken");
            Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            // Convertimos la fecha a string para enviar al backend
            resennaNueva.FechaString = resennaNueva.Fecha.ToString("yyyy-MM-dd");

            var response = await Http.PostAsJsonAsync(
                "https://gestionsalyapi.onrender.com/resennas",
                resennaNueva
            );

            if (response.IsSuccessStatusCode)
            {
                // Mostrar mensaje en el formulario
                mensaje = "✅ Reseña creada correctamente.";

                // Esperar un momento para que el usuario vea el mensaje
                await Task.Delay(1500);

                // Redirigir a SobreNosotros
                Navigation.NavigateTo("/sobrenosotros");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                mensaje = $"❌ Error al crear reseña: {response.StatusCode} - {error}";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"🚨 Error de conexión: {ex.Message}";
        }
    }

    private void Cancelar()
    {
        Navigation.NavigateTo("/sobrenosotros");
    }

    public class ResennaDTO
    {
        [JsonPropertyName("id_resena")]
        public int Id { get; set; }

        [JsonPropertyName("nombre_cliente")]
        [Required(ErrorMessage = "El nombre del cliente es obligatorio")]
        public string Nombre_Cliente { get; set; }

        [JsonPropertyName("nombre_trabajador")]
        [Required(ErrorMessage = "El nombre del trabajador es obligatorio")]
        public string Nombre_Trabajador { get; set; }

        [JsonPropertyName("calificacion")]
        [Range(1, 5, ErrorMessage = "La calificación debe estar entre 1 y 5")]
        public int Calificacion { get; set; }

        [JsonPropertyName("comentario")]
        public string Comentario { get; set; }

        // Campo real de fecha en C#
        [JsonIgnore]
        public DateTime Fecha { get; set; } = DateTime.Today;

        // Campo que se manda al backend en formato correcto
        [JsonPropertyName("fecha")]
        public string FechaString { get; set; }
    }
}


