@page "/Reseña/resennas"
@using System.Text.Json.Serialization

<PageTitle>Gestión de Reseñas</PageTitle>

@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS

<h3 class="form-title">Gestión de Reseñas</h3>

@if (resennaDetalle == null && resennaEliminar == null && resennaEditar == null)
{
    <div class="login-form">
        <div class="mb-3 d-flex flex-wrap align-items-center">
            <input type="number" id="InputBuscar" class="form-control styled-input me-2 mb-2 flex-grow-1" placeholder="Buscar por ID" @bind="filtroId" />
            <button id="btnBuscar" class="btn styled-btn primary mb-2 me-2" @onclick="AplicarFiltro">Buscar</button>
            <button class="btn styled-btn secondary mb-2" @onclick="LimpiarFiltro">Limpiar</button>
        </div>

        @if (resennas == null)
        {
            <p class="mensaje">Cargando reseñas...</p>
        }
        else if (!resennas.Any())
        {
            <p class="mensaje">No hay reseñas registradas.</p>
        }
        else
        {
            <select class="form-select form-select-sm styled-input me-2 mb-2" style="width: 200px;" @onchange="CambiarTamanoPagina">
                <option value="5">5 por página</option>
                <option value="10">10 por página</option>
                <option value="20">20 por página</option>
                <option value="50">50 por página</option>
                <option value="100">100 por página</option>
                <option value="5000">Todos</option>
            </select>

            <div class="table-responsive">
                <table class="table styled-table">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Cliente</th>
                            <th>Trabajador</th>
                            <th>Calificación</th>
                            <th>Comentario</th>
                            <th>Fecha</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var r in resennas)
                        {
                            <tr>
                                <td>@r.Id</td>
                                <td>@r.Nombre_Cliente</td>
                                <td>@r.Nombre_Trabajador</td>
                                <td>@r.Calificacion</td>
                                <td>@r.Comentario</td>
                                <td>@r.Fecha?.ToString("yyyy-MM-dd")</td>
                                <td>
                                    <button id="btnVer" class="btn styled-btn info btn-sm me-1" @onclick="@(() => VerDetalle(r.Id))">Ver</button>
                                    <button id="btnEditar" class="btn styled-btn warning btn-sm me-1" @onclick="@(() => EditarResenna(r.Id))">Editar</button>
                                    <button id="btnEliminar" class="btn styled-btn danger btn-sm" @onclick="@(() => MostrarConfirmacionEliminar(r))">Eliminar</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Paginación -->
            <div class="d-flex justify-content-center align-items-center mt-3">
                <button class="btn styled-btn secondary me-2" @onclick="PaginaAnterior" disabled="@(paginaActual == 1)">Anterior</button>
                <span><strong>Página @paginaActual de @totalPaginas</strong></span>
                <button class="btn styled-btn secondary ms-2" @onclick="PaginaSiguiente" disabled="@(paginaActual == totalPaginas)">Siguiente</button>
            </div>
        }
    </div>
}
else if (resennaDetalle != null && resennaEliminar == null && resennaEditar == null)
{
    <div class="login-form styled-card">
        <p><strong>ID:</strong> @resennaDetalle.Id</p>
        <p><strong>Cliente:</strong> @resennaDetalle.Nombre_Cliente</p>
        <p><strong>Trabajador:</strong> @resennaDetalle.Nombre_Trabajador</p>
        <p><strong>Calificación:</strong> @resennaDetalle.Calificacion</p>
        <p><strong>Comentario:</strong> @resennaDetalle.Comentario</p>
        <p><strong>Fecha:</strong> @resennaDetalle.Fecha?.ToString("yyyy-MM-dd")</p>
        <button class="btn styled-btn secondary mt-2" @onclick="Regresar">Regresar</button>
    </div>
}
else if (resennaEliminar != null)
{
    <div class="login-form border-danger">
        <div class="alert alert-warning mb-3" role="alert">
            ⚠️ ¿Estás seguro que deseas eliminar esta reseña?
        </div>
        <p><strong>ID:</strong> @resennaEliminar.Id</p>
        <p><strong>Cliente:</strong> @resennaEliminar.Nombre_Cliente</p>
        <p><strong>Comentario:</strong> @resennaEliminar.Comentario</p>

        <div class="d-flex mt-3">
            <button id="btnEliminarConfirmar" class="btn styled-btn danger btn-sm me-2" @onclick="ConfirmarEliminar">ELIMINAR</button>
            <button class="btn styled-btn secondary btn-sm" @onclick="CancelarEliminar">CANCELAR</button>
        </div>
    </div>
}
else if (resennaEditar != null)
{
    <div class="login-form styled-card border-warning">
        <h5>✏️ Editar Reseña</h5>

        <div class="mb-3">
            <label class="form-label">Cliente</label>
            <input id="InputNombreEdit" class="form-control styled-input" @bind="resennaEditar.Nombre_Cliente" />
        </div>

        <div class="mb-3">
            <label class="form-label">Trabajador</label>
            <input id="InputTrabajadorEdit" class="form-control styled-input" @bind="resennaEditar.Nombre_Trabajador" />
        </div>

        <div class="mb-3">
            <label class="form-label">Calificación</label>
            <input id="InputCalificacionEdit" type="number" class="form-control styled-input" @bind="resennaEditar.Calificacion" min="1" max="5" />
        </div>

        <div class="mb-3">
            <label class="form-label">Comentario</label>
            <textarea id="InputComentarioEdit" class="form-control styled-input" @bind="resennaEditar.Comentario"></textarea>
        </div>

        <div class="mb-3">
            <label class="form-label">Fecha</label>
            <input type="date" class="form-control styled-input" @bind="resennaEditar.Fecha" />
        </div>

        <div class="d-flex">
            <button id="btnGuardarEdit" class="btn styled-btn primary me-2" @onclick="GuardarEdicion">Guardar</button>
            <button class="btn styled-btn secondary" @onclick="CancelarEditar">Cancelar</button>
        </div>
    </div>
}

@if (!string.IsNullOrEmpty(mensaje))
{
    <p class="mensaje">@mensaje</p>
}

<style>
    .form-title {
        font-family: 'Lilita One', cursive;
        font-size: 2rem;
        font-weight: bold;
        color: #111;
        margin-bottom: 2rem;
        text-align: center;
    }

    .login-form {
        max-width: 900px;
        margin: 0 auto 2rem auto;
        padding: 2rem;
        background-color: #f7e6fa;
        border-radius: 16px;
        box-shadow: 0 6px 12px rgba(0,0,0,0.15);
    }

    .styled-input {
        border-radius: 12px;
        border: 2px solid #a569bd;
        padding: 0.7rem 1rem;
        margin-bottom: 1rem;
        transition: all 0.3s ease;
        font-weight: bold;
        color: #111;
        background-color: #fff;
    }

    .styled-input:focus {
        outline: none;
        box-shadow: 0 0 0 0.2rem #9b59b6;
        border-color: #9b59b6;
    }

    .styled-btn {
        border-radius: 12px;
        font-weight: bold;
        padding: 0.5rem 1rem;
        margin: 0.3rem;
        transition: all 0.3s ease;
        box-shadow: 0 3px 6px rgba(0,0,0,0.15);
        color: #111;
        cursor: pointer;
        font-size: 0.9rem;
    }

    .styled-btn.primary {
        background-color: #a569bd;
        border: none;
    }

    .styled-btn.secondary {
        background-color: #d9a3e0;
        border: none;
    }

    .styled-btn.info {
        background-color: #85c1e9;
        border: none;
        color: #111;
    }

    .styled-btn.warning {
        background-color: #f5b041;
        border: none;
        color: #111;
    }

    .styled-btn.danger {
        background-color: #e74c3c;
        border: none;
        color: #111;
    }

    .styled-btn:hover {
        transform: translateY(-3px);
        box-shadow: 0 8px 16px rgba(0,0,0,0.25);
    }

    .styled-table {
        width: 100%;
        border-collapse: collapse;
        background-color: #fff;
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 6px 12px rgba(0,0,0,0.1);
    }

    .styled-table th {
        background-color: #a569bd;
        color: #fff;
        text-align: center;
        padding: 0.8rem;
    }

    .styled-table td {
        padding: 0.8rem;
        border-top: 1px solid #ddd;
        text-align: center;
    }

    .styled-card {
        border-radius: 16px;
        background-color: #f7e6fa;
        box-shadow: 0 6px 12px rgba(0,0,0,0.15);
        padding: 1rem;
    }

    .mensaje {
        font-weight: bold;
        margin-top: 1rem;
        text-align: center;
        color: #6f2c6f;
    }

    .styled-table th, .styled-table td {
        vertical-align: middle;
    }
</style>

@code {
    private List<ResennaDTO> resennas;
    private ResennaDTO resennaDetalle = null;
    private ResennaDTO resennaEliminar = null;
    private ResennaDTO resennaEditar = null;
    private string mensaje;
    private int? filtroId = null;
    private List<ResennaDTO> resennasFiltradas;

    // Paginación
    private int paginaActual = 1;
    private int tamanoPagina = 10;
    private int totalPaginas = 1;


    protected override async Task OnInitializedAsync()
    {
        var token = await JS.InvokeAsync<string>("sessionStorage.getItem", "authToken");
        if (string.IsNullOrEmpty(token))
        {
            Navigation.NavigateTo("/");
            return;
        }

        await CargarResennasAsync();
    }

    private async Task CargarResennasAsync()
    {
        try
        {
            var token = await JS.InvokeAsync<string>("sessionStorage.getItem", "authToken");
            Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var respuesta = await Http.GetFromJsonAsync<RespuestaResennasPaginadas>(
            $"https://gestionsalyapi.onrender.com/resennas?page={paginaActual}&limit={tamanoPagina}"
        );

            resennas = respuesta?.Data ?? new List<ResennaDTO>();
            totalPaginas = respuesta?.TotalPages ?? 1;

        }
        catch (Exception ex)
        {
            mensaje = $"🚨 Error al cargar reseñas: {ex.Message}";
        }
    }

    private async Task VerDetalle(int id)
    {
        try
        {
            var token = await JS.InvokeAsync<string>("sessionStorage.getItem", "authToken");
            Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            resennaDetalle = await Http.GetFromJsonAsync<ResennaDTO>(
                $"https://gestionsalyapi.onrender.com/resennas/{id}"
            );
        }
        catch (Exception ex)
        {
            mensaje = $"🚨 Error al obtener detalle: {ex.Message}";
        }
    }

    private async Task EditarResenna(int id)
    {
        try
        {
            var token = await JS.InvokeAsync<string>("sessionStorage.getItem", "authToken");
            Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            resennaEditar = await Http.GetFromJsonAsync<ResennaDTO>(
                $"https://gestionsalyapi.onrender.com/resennas/{id}"
            );
        }
        catch (Exception ex)
        {
            mensaje = $"🚨 Error al cargar reseña para editar: {ex.Message}";
        }
    }

    private async Task GuardarEdicion()
    {
        try
        {
            var token = await JS.InvokeAsync<string>("sessionStorage.getItem", "authToken");
            Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var payload = new
            {
                nombre_cliente = resennaEditar.Nombre_Cliente,
                nombre_trabajador = resennaEditar.Nombre_Trabajador,
                calificacion = resennaEditar.Calificacion,
                comentario = resennaEditar.Comentario,
                fecha = resennaEditar.Fecha?.ToString("yyyy-MM-dd")
            };

            var response = await Http.PutAsJsonAsync(
                $"https://gestionsalyapi.onrender.com/resennas/{resennaEditar.Id}",
                payload
            );

            if (response.IsSuccessStatusCode)
            {
                mensaje = "✅ Reseña actualizada correctamente.";
                resennaEditar = null;
                await CargarResennasAsync();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                mensaje = $"❌ Error al actualizar reseña: {response.ReasonPhrase}. {errorContent}";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"🚨 Error de conexión: {ex.Message}";
        }
    }

    private void Regresar()
    {
        resennaDetalle = null;
        resennaEliminar = null;
        resennaEditar = null;
    }

    private void MostrarConfirmacionEliminar(ResennaDTO resenna)
    {
        resennaEliminar = resenna;
    }

    private async Task ConfirmarEliminar()
    {
        try
        {
            var token = await JS.InvokeAsync<string>("sessionStorage.getItem", "authToken");
            Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var response = await Http.DeleteAsync(
                $"https://gestionsalyapi.onrender.com/resennas/{resennaEliminar.Id}"
            );

            if (response.IsSuccessStatusCode)
            {
                mensaje = "✅ Reseña eliminada correctamente.";
                resennaEliminar = null;
                await CargarResennasAsync();
            }
            else
            {
                mensaje = $"❌ Error al eliminar reseña: {response.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"🚨 Error de conexión: {ex.Message}";
        }
    }

    private void CancelarEliminar() => Regresar();
    private void CancelarEditar() => resennaEditar = null;

    private void AplicarFiltro()
    {
        if (filtroId.HasValue)
        {
            resennasFiltradas = resennas.Where(r => r.Id == filtroId.Value).ToList();

            if (resennasFiltradas.Any())
                mensaje = "✅ Reseña encontrada";
            else
                mensaje = "⚠️ No se encontró ninguna reseña con ese ID";

            paginaActual = 1;
        }
        else
        {
            resennasFiltradas = resennas;
            mensaje = null;
        }
    }

    private void LimpiarFiltro()
    {
        filtroId = null;
        resennasFiltradas = resennas;
        mensaje = null;
        paginaActual = 1;
    }

    // Paginación
    private async Task PaginaAnterior()
    {
        if (paginaActual > 1)
        {
            paginaActual--;
            await CargarResennasAsync();
        }
    }

    private async Task PaginaSiguiente()
    {
        if (paginaActual < totalPaginas)
        {
            paginaActual++;
            await CargarResennasAsync();
        }
    }


    private async Task CambiarTamanoPagina(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int nuevoTamano))
        {
            tamanoPagina = nuevoTamano;
            paginaActual = 1;
            await CargarResennasAsync();
        }
    }


    public class ResennaDTO
    {
        [JsonPropertyName("id_resena")]
        public int Id { get; set; }

        [JsonPropertyName("nombre_cliente")]
        public string Nombre_Cliente { get; set; }

        [JsonPropertyName("nombre_trabajador")]
        public string Nombre_Trabajador { get; set; }

        [JsonPropertyName("calificacion")]
        public int Calificacion { get; set; }

        [JsonPropertyName("comentario")]
        public string Comentario { get; set; }

        [JsonPropertyName("fecha")]
        public DateTime? Fecha { get; set; }
    }

    public class RespuestaResennasPaginadas
    {
        [JsonPropertyName("page")]
        public int Page { get; set; }

        [JsonPropertyName("limit")]
        public int Limit { get; set; }

        [JsonPropertyName("total")]
        public int Total { get; set; }

        [JsonPropertyName("totalPages")]
        public int TotalPages { get; set; }

        [JsonPropertyName("data")]
        public List<ResennaDTO> Data { get; set; }
    }


}




