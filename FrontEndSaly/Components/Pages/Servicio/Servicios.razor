@page "/servicio/servicios"
@using System.Text.Json.Serialization

<PageTitle>Gestión de Servicios</PageTitle>

@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS

<h3>Gestión de Servicios</h3>

@if (servicioDetalle == null && servicioEliminar == null)
{
    <button class="btn btn-primary mb-3" @onclick="IrACrearServicio">Crear Servicio</button>

    <!-- 🔍 Filtro de búsqueda por ID -->
    <div class="input-group mb-3" style="max-width: 300px;">
        <input type="number" class="form-control" placeholder="Buscar por ID" @bind="busquedaId" />
        <button class="btn btn-outline-primary" @onclick="BuscarPorId">Buscar</button>
        <button class="btn btn-outline-secondary" @onclick="LimpiarBusqueda">Limpiar</button>
    </div>

    @if (servicios == null)
    {
        <p>Cargando servicios...</p>
    }
    else if (!servicios.Any())
    {
        <p>No hay servicios registrados.</p>
    }
    else
    {
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Nombre</th>
                    <th>Descripción</th>
                    <th>Duración</th>
                    <th>Precio</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var servicio in servicios)
                {
                    <tr>
                        <td>@servicio.Id</td>
                        <td>@servicio.Nombre_Servicio</td>
                        <td>@servicio.Descripcion</td>
                        <td>@servicio.Duracion</td>
                        <td>@($"${servicio.Precio}")</td>
                        <td>
                            <button class="btn btn-info btn-sm me-1" @onclick="@(() => VerServicio(servicio.Id))">Ver</button>
                            <button class="btn btn-warning btn-sm me-1" @onclick="@(() => EditarServicio(servicio.Id))">Editar</button>
                            <button class="btn btn-danger btn-sm" @onclick="@(() => MostrarConfirmacionEliminar(servicio))">Eliminar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}
else if (servicioDetalle != null && servicioEliminar == null)
{
    <div class="card p-3 mb-3">
        <p><strong>ID:</strong> @servicioDetalle.Id</p>
        <p><strong>Nombre:</strong> @servicioDetalle.Nombre_Servicio</p>
        <p><strong>Descripción:</strong> @servicioDetalle.Descripcion</p>
        <p><strong>Duración:</strong> @servicioDetalle.Duracion</p>
        <p><strong>Precio:</strong> $@servicioDetalle.Precio</p>
    </div>

    <button class="btn btn-primary" @onclick="Regresar">Regresar</button>
}
else if (servicioEliminar != null)
{
    <div class="card p-3 mb-3 border-danger">
        <div class="alert alert-warning mb-3" role="alert">
            ⚠️ ¿Estás seguro que deseas eliminar este servicio?
        </div>

        <p><strong>ID:</strong> @servicioEliminar.Id</p>
        <p><strong>Nombre:</strong> @servicioEliminar.Nombre_Servicio</p>
        <p><strong>Precio:</strong> $@servicioEliminar.Precio</p>

        <div class="d-flex mt-3">
            <button class="btn btn-danger btn-sm me-2" @onclick="ConfirmarEliminar">ELIMINAR</button>
            <button class="btn btn-secondary btn-sm" @onclick="CancelarEliminar">CANCELAR</button>
        </div>
    </div>
}

@if (!string.IsNullOrEmpty(mensaje))
{
    <p>@mensaje</p>
}

@code {
    private List<ServicioDTO> servicios;
    private string mensaje;

    private ServicioDTO servicioDetalle = null;
    private ServicioDTO servicioEliminar = null;

    private int? busquedaId;

    protected override async Task OnInitializedAsync()
    {
        var token = await JS.InvokeAsync<string>("sessionStorage.getItem", "authToken");
        if (string.IsNullOrEmpty(token))
        {
            Navigation.NavigateTo("/");
            return;
        }

        await CargarServiciosAsync();
    }

    private async Task CargarServiciosAsync()
    {
        try
        {
            var token = await JS.InvokeAsync<string>("sessionStorage.getItem", "authToken");
            Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            servicios = await Http.GetFromJsonAsync<List<ServicioDTO>>(
                "https://gestionsalyapi.onrender.com/servicios"
            );
        }
        catch (Exception ex)
        {
            mensaje = $"🚨 Error al cargar servicios: {ex.Message}";
        }
    }

    private void IrACrearServicio() => Navigation.NavigateTo("/servicios/crear");
    private void EditarServicio(int id) => Navigation.NavigateTo($"/servicios/editar/{id}");

    private async Task VerServicio(int id)
    {
        try
        {
            var token = await JS.InvokeAsync<string>("sessionStorage.getItem", "authToken");
            Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            servicioDetalle = await Http.GetFromJsonAsync<ServicioDTO>(
                $"https://gestionsalyapi.onrender.com/servicios/{id}"
            );
        }
        catch (Exception ex)
        {
            mensaje = $"🚨 Error al obtener detalle del servicio: {ex.Message}";
        }
    }

    private void Regresar()
    {
        servicioDetalle = null;
        servicioEliminar = null;
    }

    private void MostrarConfirmacionEliminar(ServicioDTO servicio)
    {
        servicioEliminar = servicio;
        servicioDetalle = servicio;
    }

    private async Task ConfirmarEliminar()
    {
        try
        {
            var token = await JS.InvokeAsync<string>("sessionStorage.getItem", "authToken");
            Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var response = await Http.DeleteAsync(
                $"https://gestionsalyapi.onrender.com/servicios/{servicioEliminar.Id}"
            );

            if (response.IsSuccessStatusCode)
            {
                mensaje = "✅ Servicio eliminado correctamente.";
                servicioEliminar = null;
                servicioDetalle = null;
                await CargarServiciosAsync();
                Navigation.NavigateTo("/servicio/servicios");
            }
            else
            {
                mensaje = $"❌ Error al eliminar servicio: {response.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"🚨 Error de conexión: {ex.Message}";
        }
    }

    private void CancelarEliminar()
    {
        servicioEliminar = null;
        servicioDetalle = null;
        Navigation.NavigateTo("/servicio/servicios");
    }

    // ✅ Buscar servicio por ID
    private async Task BuscarPorId()
    {
        if (busquedaId == null || busquedaId <= 0)
        {
            mensaje = "⚠️ Ingrese un ID válido para buscar.";
            return;
        }

        try
        {
            var token = await JS.InvokeAsync<string>("sessionStorage.getItem", "authToken");
            Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var servicio = await Http.GetFromJsonAsync<ServicioDTO>(
                $"https://gestionsalyapi.onrender.com/servicios/{busquedaId}"
            );

            if (servicio != null)
            {
                servicios = new List<ServicioDTO> { servicio };
                mensaje = $"✅ Servicio con ID {busquedaId} encontrado.";
            }
            else
            {
                servicios = new List<ServicioDTO>();
                mensaje = $"⚠️ No se encontró ningún servicio con ID {busquedaId}.";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"🚨 Error al buscar servicio: {ex.Message}";
        }
    }

    // ✅ Limpiar búsqueda y recargar todo
    private async Task LimpiarBusqueda()
    {
        busquedaId = null;
        mensaje = "";
        await CargarServiciosAsync();
    }

    public class ServicioDTO
    {
        [JsonPropertyName("id_servicio")]
        public int Id { get; set; }

        [JsonPropertyName("nombre_servicio")]
        public string Nombre_Servicio { get; set; }

        [JsonPropertyName("descripcion")]
        public string Descripcion { get; set; }

        [JsonPropertyName("duracion")]
        public int Duracion { get; set; }   // ← corregido

        [JsonPropertyName("precio")]
        public string Precio { get; set; }  // ← corregido
    }


}
