@page "/servicios/editar/{id:int}"
@using System.Text.Json.Serialization
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS

<PageTitle>Editar Servicio</PageTitle>

<h3 class="form-title">Editar Servicio</h3>

@if (servicio == null)
{
    <p class="mensaje">Cargando servicio...</p>
}
else
{
    <EditForm Model="@servicio" OnValidSubmit="@ActualizarServicio" class="login-form">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label class="form-label">Nombre del Servicio</label>
            <InputText class="form-control styled-input" @bind-Value="servicio.Nombre_Servicio" />
        </div>

        <div class="mb-3">
            <label class="form-label">Descripción</label>
            <InputTextArea class="form-control styled-input" @bind-Value="servicio.Descripcion" />
        </div>

        <div class="mb-3">
            <label class="form-label">Duración (minutos)</label>
            <InputNumber class="form-control styled-input" @bind-Value="servicio.Duracion" />
        </div>

        <div class="mb-3">
            <label class="form-label">Precio ($)</label>
            <InputText class="form-control styled-input" @bind-Value="servicio.Precio" />
        </div>

        <div class="d-flex mt-3">
            <button type="submit" class="btn styled-btn primary">Guardar Cambios</button>
            <button type="button" class="btn styled-btn secondary ms-2" @onclick="Cancelar">Cancelar</button>
        </div>
    </EditForm>
}

@if (!string.IsNullOrEmpty(mensaje))
{
    <p class="mensaje">@mensaje</p>
}

<style>
    .form-title {
        font-family: 'Lilita One', cursive;
        font-size: 2rem;
        font-weight: bold;
        color: #111;
        margin-bottom: 2rem;
        text-align: center;
    }

    .login-form {
        max-width: 600px;
        margin: 0 auto 2rem auto;
        padding: 2rem;
        background-color: #f7e6fa;
        border-radius: 16px;
        box-shadow: 0 6px 12px rgba(0,0,0,0.15);
    }

    .styled-input {
        border-radius: 12px;
        border: 2px solid #a569bd;
        padding: 0.7rem 1rem;
        transition: all 0.3s ease;
        font-weight: bold;
        color: #111;
        background-color: #fff;
    }

        .styled-input:focus {
            outline: none;
            box-shadow: 0 0 0 0.2rem #9b59b6;
            border-color: #9b59b6;
        }

    .styled-btn {
        border-radius: 12px;
        font-weight: bold;
        padding: 0.5rem 1rem;
        margin: 0.3rem;
        transition: all 0.3s ease;
        box-shadow: 0 3px 6px rgba(0,0,0,0.15);
        color: #111;
        cursor: pointer;
        font-size: 0.9rem;
    }

        .styled-btn.primary {
            background-color: #a569bd;
            border: none;
        }

        .styled-btn.secondary {
            background-color: #d9a3e0;
            border: none;
        }

        .styled-btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 16px rgba(0,0,0,0.25);
        }

    .mensaje {
        font-weight: bold;
        margin-top: 1rem;
        text-align: center;
        color: #6f2c6f;
    }
</style>

@code {
    [Parameter] public int id { get; set; }
    private ServicioDTO servicio;
    private string mensaje;

    protected override async Task OnInitializedAsync()
    {
        await CargarServicio();
    }

    private async Task CargarServicio()
    {
        try
        {
            var token = await JS.InvokeAsync<string>("sessionStorage.getItem", "authToken");
            Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            servicio = await Http.GetFromJsonAsync<ServicioDTO>(
                $"https://1xbfjn6k-8081.use.devtunnels.ms/servicios/{id}"
            );
        }
        catch (Exception ex)
        {
            mensaje = $"🚨 Error al cargar servicio: {ex.Message}";
        }
    }

    private async Task ActualizarServicio()
    {
        try
        {
            var token = await JS.InvokeAsync<string>("sessionStorage.getItem", "authToken");
            Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var response = await Http.PutAsJsonAsync(
                $"https://1xbfjn6k-8081.use.devtunnels.ms/servicios/{id}", servicio
            );

            if (response.IsSuccessStatusCode)
            {
                mensaje = "✅ Servicio actualizado correctamente.";
                await Task.Delay(1500);
                Navigation.NavigateTo("/servicio/servicios");
            }
            else
            {
                mensaje = $"❌ Error al actualizar servicio: {response.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"🚨 Error al actualizar: {ex.Message}";
        }
    }

    private void Cancelar()
    {
        Navigation.NavigateTo("/servicio/servicios");
    }

    public class ServicioDTO
    {
        [JsonPropertyName("id_servicio")]
        public int Id { get; set; }

        [JsonPropertyName("nombre_servicio")]
        public string Nombre_Servicio { get; set; }

        [JsonPropertyName("descripcion")]
        public string Descripcion { get; set; }

        [JsonPropertyName("duracion")]
        public int Duracion { get; set; }

        [JsonPropertyName("precio")]
        public string Precio { get; set; }
    }
}





@* @page "/servicios/editar/{id:int}"
@using System.Text.Json.Serialization
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS

<PageTitle>Editar Servicio</PageTitle>

<h3>✏️ Editar Servicio</h3>

@if (servicio == null)
{
    <p>Cargando servicio...</p>
}
else
{
    <EditForm Model="@servicio" OnValidSubmit="@ActualizarServicio">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label class="form-label">Nombre del Servicio</label>
            <InputText class="form-control" @bind-Value="servicio.Nombre_Servicio" />
        </div>

        <div class="mb-3">
            <label class="form-label">Descripción</label>
            <InputTextArea class="form-control" @bind-Value="servicio.Descripcion" />
        </div>

        <div class="mb-3">
            <label class="form-label">Duración</label>
            <InputNumber class="form-control" @bind-Value="servicio.Duracion" />
        </div>

        <div class="mb-3">
            <label class="form-label">Precio</label>
            <InputText class="form-control" @bind-Value="servicio.Precio" />
        </div>

        <button type="submit" class="btn btn-warning">💾 Guardar cambios</button>
        <button type="button" class="btn btn-secondary ms-2" @onclick="Cancelar">Cancelar</button>
    </EditForm>
}

@if (!string.IsNullOrEmpty(mensaje))
{
    <div class="alert alert-info mt-3">@mensaje</div>
}
@code {

    [Parameter] public int id { get; set; }
    private ServicioDTO servicio;
    private string mensaje;

    protected override async Task OnInitializedAsync()
    {
        await CargarServicio();
    }

    private async Task CargarServicio()
    {
        try
        {
            var token = await JS.InvokeAsync<string>("sessionStorage.getItem", "authToken");
            Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            servicio = await Http.GetFromJsonAsync<ServicioDTO>($"https://1xbfjn6k-8081.use.devtunnels.ms/servicios/{id}");
        }
        catch (Exception ex)
        {
            mensaje = $"🚨 Error al cargar servicio: {ex.Message}";
        }
    }

    private async Task ActualizarServicio()
    {
        try
        {
            var token = await JS.InvokeAsync<string>("sessionStorage.getItem", "authToken");
            Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var response = await Http.PutAsJsonAsync($"https://1xbfjn6k-8081.use.devtunnels.ms/servicios/{id}", servicio);

            if (response.IsSuccessStatusCode)
            {
                mensaje = "✅ Servicio actualizado correctamente.";
                await Task.Delay(1500);
                Navigation.NavigateTo("/servicio/servicios");
            }
            else
            {
                mensaje = $"❌ Error al actualizar servicio: {response.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"🚨 Error al actualizar: {ex.Message}";
        }
    }

    private void Cancelar()
    {
        Navigation.NavigateTo("/servicio/servicios");
    }

    public class ServicioDTO
    {
        [JsonPropertyName("id_servicio")]
        public int Id { get; set; }

        [JsonPropertyName("nombre_servicio")]
        public string Nombre_Servicio { get; set; }

        [JsonPropertyName("descripcion")]
        public string Descripcion { get; set; }

        [JsonPropertyName("duracion")]
        public int Duracion { get; set; }

        [JsonPropertyName("precio")]
        public string Precio { get; set; }
    }

}
 *@