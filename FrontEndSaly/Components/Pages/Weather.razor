@page "/"
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager Navigation

@using FrontEndSaly.Components.Layout
@layout EmptyLayout

<div class="login-container">
    <!-- Logo arriba -->
    <div class="logo-container">
        <img src="images/logito.jpg" alt="Logo Empresa" class="logo" />
    </div>

    <h3 class="form-title">Iniciar Sesión</h3>

    <EditForm Model="loginModel" OnValidSubmit="LoginAsync" class="login-form">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label>Email:</label>
            <InputText @bind-Value="loginModel.Email" id="inputemail" class="form-control styled-input" />
        </div>

        <div class="form-group">
            <label>Password:</label>
            <InputText @bind-Value="loginModel.Password" id="inputpassword" class="form-control styled-input" type="password" />
        </div>

        <button type="submit" id="btnIngresar" class="btn styled-btn primary">Ingresar</button>
    </EditForm>

    @if (!string.IsNullOrEmpty(mensaje))
    {
        <div class="alerta">
            @mensaje
        </div>
    }

    <div class="mt-3 text-center">
        <p>¿No tienes cuenta?</p>
        <button class="btn styled-btn secondary" @onclick="IrARegistro">Regístrate aquí</button>
    </div>
</div>

<style>
    /* Contenedor general */
    .login-container {
        max-width: 400px;
        margin: 2rem auto;
        text-align: center;
    }

    /* Logo */
    .logo-container {
        margin-bottom: 1.5rem;
    }

    .logo {
        width: 210px; /* Ajusta según tu logo */
        height: auto;
        border-radius: 8px; /* opcional */
        box-shadow: 0 4px 8px rgba(0,0,0,0.1); /* opcional */
    }

    /* Título */
    .form-title {
        font-family: 'Lilita One', cursive;
        font-size: 2rem;
        font-weight: bold;
        color: #111;
        margin-bottom: 2rem;
    }

    /* Formulario contenedor */
    .login-form {
        padding: 2rem;
        background-color: #f7e6fa;
        border-radius: 16px;
        box-shadow: 0 6px 12px rgba(0,0,0,0.15);
    }

    /* Inputs estilizados */
    .styled-input {
        border-radius: 12px;
        border: 2px solid #a569bd;
        padding: 0.7rem 1rem;
        margin-bottom: 1.2rem;
        transition: all 0.3s ease;
        font-weight: bold;
        color: #111;
        background-color: #fff;
    }

        .styled-input:focus {
            outline: none;
            box-shadow: 0 0 0 0.2rem #9b59b6;
            border-color: #9b59b6;
        }

    /* Botones */
    .styled-btn {
        border-radius: 12px;
        font-weight: bold;
        padding: 0.7rem 1.5rem;
        margin: 0.5rem;
        transition: all 0.3s ease;
        box-shadow: 0 3px 6px rgba(0,0,0,0.15);
        color: #111;
        cursor: pointer;
        font-size: 1rem;
    }

        .styled-btn.primary {
            background-color: #a569bd;
            border: none;
        }

        .styled-btn.secondary {
            background-color: #d9a3e0;
            border: none;
        }

        .styled-btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 16px rgba(0,0,0,0.25);
            color: #111;
        }

    /* Alerta amigable */
    .alerta {
        margin-top: 1rem;
        padding: 0.8rem 1rem;
        border-radius: 12px;
        font-weight: bold;
        color: #fff;
        background-color: #a569bd;
        text-align: center;
        box-shadow: 0 3px 6px rgba(0,0,0,0.15);
    }

    /* Labels */
    .form-group label {
        font-weight: bold;
        margin-bottom: 0.3rem;
        display: block;
        color: #111;
        font-size: 1.05rem;
    }
</style>

@code {
    private LoginRequest loginModel = new LoginRequest();
    private string mensaje;

    private async Task LoginAsync()
    {
        if (string.IsNullOrWhiteSpace(loginModel.Email) && string.IsNullOrWhiteSpace(loginModel.Password))
        {
            mensaje = "⚠️ Por favor ingrese sus credenciales";
            return;
        }
        else if (string.IsNullOrWhiteSpace(loginModel.Email))
        {
            mensaje = "⚠️ Por favor ingrese su email";
            return;
        }
        else if (string.IsNullOrWhiteSpace(loginModel.Password))
        {
            mensaje = "⚠️ Por favor ingrese su contraseña";
            return;
        }

        try
        {
            var response = await Http.PostAsJsonAsync("https://1xbfjn6k-8080.use.devtunnels.ms/usuarioslist/login", loginModel);

            if (response.IsSuccessStatusCode)
            {
                var resultado = await response.Content.ReadFromJsonAsync<LoginResponse>();
                await JS.InvokeVoidAsync("sessionStorage.setItem", "authToken", resultado.Token);
                mensaje = "✅ Login exitoso!";
                Navigation.NavigateTo("/sobrenosotros");
            }
            else
            {
                mensaje = "❌ Credenciales incorrectas, intente nuevamente por favor";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"🚨 Error de conexión: {ex.Message}";
        }
    }

    private void IrARegistro()
    {
        Navigation.NavigateTo("/crearusuario/login");
    }

    public class LoginRequest
    {
        public string Email { get; set; }
        public string Password { get; set; }
    }

    public class LoginResponse
    {
        public string Mensaje { get; set; }
        public string Token { get; set; }
        public int Role_Id { get; set; }
    }
}



@* @page "/"

@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager Navigation

<h3>Iniciar Sesión</h3>

<EditForm Model="loginModel" OnValidSubmit="LoginAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label>Email:</label>
        <InputText @bind-Value="loginModel.Email" class="form-control" />
    </div>

    <div class="mb-3">
        <label>Password:</label>
        <InputText @bind-Value="loginModel.Password" class="form-control" type="password" />
    </div>

    <button type="submit" class="btn btn-success">Ingresar</button>
</EditForm>

@if (!string.IsNullOrEmpty(mensaje))
{
    <p>@mensaje</p>
}

<div class="mt-3 text-center">
    <p>¿No tienes cuenta?</p>
    <button class="btn btn-outline-primary" @onclick="IrARegistro">Regístrate aquí</button>
</div>

@code {
    private LoginRequest loginModel = new LoginRequest();
    private string mensaje;

    private async Task LoginAsync()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("https://1xbfjn6k-8080.use.devtunnels.ms/usuarioslist/login", loginModel);

            if (response.IsSuccessStatusCode)
            {
                var resultado = await response.Content.ReadFromJsonAsync<LoginResponse>();

                // Guardar token en sessionStorage
                await JS.InvokeVoidAsync("sessionStorage.setItem", "authToken", resultado.Token);

                mensaje = "✅ Login exitoso!";

                // Redirigir a la página de usuarios
                Navigation.NavigateTo("/counter");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                mensaje = $"❌ Error de login: {errorContent}";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"🚨 Error de conexión: {ex.Message}";
        }
    }

    // ✅ Método para ir a la página de crear usuario
    private void IrARegistro()
    {
        Navigation.NavigateTo("/crearusuario"); // cambia esta ruta si tu página de registro tiene otro @page
    }

    public class LoginRequest
    {
        public string Email { get; set; }
        public string Password { get; set; }
    }

    public class LoginResponse
    {
        public string Mensaje { get; set; }
        public string Token { get; set; } // si tu API devuelve JWT
        public int Role_Id { get; set; } // si quieres guardar el rol
    }
}

 *@